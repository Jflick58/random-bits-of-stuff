
Given the following information about the column **'email'**:

- **Semantic context:** Employee's work email address
- **Statistical profile:**
  ```json
  {
    "type": "TEXT",
    "has_duplicates": false,
    "null_percentage": 0.0,
    "min": null,
    "q1": null,
    "median": null,
    "q3": null,
    "max": null,
    "avg": null,
    "pattern": "john.doe@example.com",
    "value_frequency": null
  }
  ```

The output should be formatted as a JSON instance that conforms to the JSON schema below.

As an example, for the schema:

```json
{
  "properties": {
    "foo": {
      "title": "Foo",
      "description": "a list of strings",
      "type": "array",
      "items": {
        "type": "string"
      }
    }
  },
  "required": ["foo"]
}
```

The object:

```json
{
  "foo": ["bar", "baz"]
}
```

is a well-formatted instance of the schema.

The object:

```json
{
  "properties": {
    "foo": ["bar", "baz"]
  }
}
```

is **not** well-formatted.

Here is the output schema:

```json
{
  "properties": {
    "expected_type": {
      "description": "The expected data type",
      "title": "Expected Type",
      "type": "string"
    },
    "allow_missing": {
      "description": "Whether missing values are allowed - true/false",
      "title": "Allow Missing",
      "type": "boolean"
    },
    "expected_range": {
      "anyOf": [
        {
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "Expected range for numeric columns",
      "title": "Expected Range"
    },
    "expected_pattern": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "\nExpected regex pattern for string columns or null for non-string:\n\n1. For name fields, use regex patterns that describe the structure, like '^[A-Z][a-z]+ [A-Z][a-z]+$' for 'FirstName LastName'.\n2. For formatted numbers (e.g., SSN, phone numbers), use patterns like '^\\d{3}-\\d{2}-\\d{4}$' to represent the format, not specific numbers.\n3. For dates, use patterns like '^\\d{4}-\\d{2}-\\d{2}$' for YYYY-MM-DD format.\n4. Use character classes (e.g., \\d for digits, [A-Za-z] for letters) and quantifiers (e.g., +, {}, *) to describe the structure.\n5. Avoid using specific examples in the pattern; focus on the general structure.\n6. If the column doesn't require a specific pattern, you may set it to null.\n\nEnsure the expected_pattern accurately represents the structure of the data, not just a sample value.",
      "title": "Expected Pattern"
    },
    "potential_errors": {
      "description": "Descriptions of potential errors",
      "items": {
        "type": "string"
      },
      "title": "Potential Errors",
      "type": "array"
    },
    "disguised_missing_values": {
      "description": "Potential disguised missing values",
      "items": {
        "type": "string"
      },
      "title": "Disguised Missing Values",
      "type": "array"
    },
    "missing_records": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "Description of potential missing records",
      "title": "Missing Records"
    }
  },
  "required": [
    "expected_type",
    "allow_missing",
    "potential_errors",
    "disguised_missing_values"
  ]
}
```

Provide a semantic review for this column.

